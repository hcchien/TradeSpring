#!/usr/bin/perl -w
package main;
use strict;
use AnyMQ;
use AnyEvent;
use YAML::Syck qw(LoadFile);
use Getopt::Long qw(:config pass_through);
use Log::Log4perl;
use TradeSpring;

my $port = 5019;
my $test_broker;
my $logconf;
my $keepaddress;

GetOptions ("test"      => \$test_broker,
            "logconf=s" => \$logconf,
            "keepaddress" => \$keepaddress,
            "port=i"    => \$port,
        ) or die;

TradeSpring::init_logging($logconf || 'log.conf');
my $logger = Log::Log4perl->get_logger("tradespring");

my $name = shift or die "deployment required";

if (@ARGV) {
    die "unhandled arg: ".join(',',@ARGV);
}

my $deployment = TradeSpring->config->get_deployment($name) or die "deployment '$name' not found";

my $ps = TradeSpring->config->subsection($deployment, 'ps');
my $quote = TradeSpring->config->subsection($deployment, 'quote');
my $broker_config = TradeSpring->config->subsection($deployment, 'broker');

my $amq = TradeSpring->config->get_children('bus.'.$quote->{bus});

my $bus = $amq->{traits}
    ? AnyMQ->new_with_traits(%$amq) : AnyMQ->new(%$amq);

my $quit = AE::cv;

$|++;

my $cname = $broker_config->{name};

my $broker = $test_broker ? TradeSpring::local_broker()
                          : TradeSpring::jfo_broker($cname, $keepaddress ? undef : $port,
                                                    daytrade => $deployment->{daytrade});

my $has_jfo = TradeSpring::Broker::JFO->can('jfo_instances') &&
    scalar keys %{ TradeSpring::Broker::JFO->jfo_instances };
my $ready_cv = AE::cv;
my $init_cb = sub {
    $ready_cv->send(1);
};


my $ps_object;
my $ps_store;
if ($ps) {
    my $class = delete $ps->{class};
    $class =~ s/^\+// or $class = "TradeSpring::PS::".$class;
    $class->require;
    $ps_store = delete $ps->{store};
    $ps_object = $class->load($ps_store);
    $logger->info( $ps_object->info );
}

my $localbus = AnyMQ->new;
my $bar = $localbus->topic('agbar');
TradeSpring::init_quote( bus => $bus,
                         node => $quote->{node},
                         loadcnt => $quote->{loadcnt},
                         tf => $deployment->{timeframe},
                         code => $deployment->{code},
                         on_load => sub {
                             my ($session, $calc) = @_;
                             my $broker_client = $bus->new_listener($bus->topic($session->{tick_channel}));
                             $broker_client->on_error(sub { $logger->fatal(join(',',@_)) } );
                             $broker_client->poll(sub {
                                                      my $msg = shift;
                                                      $broker->on_price($msg->{price}, $msg->{volume}, { timestamp => $msg->{timestamp} } );
                                                  });
                             TradeSpring::init_terminal($bus, $session, $calc, $deployment->{timeframe});
                             my $end = $session->{session_end};
                             my $start = $session->{session_start};
                             if ($init_cb) {
                                 if ($start - 450 > AnyEvent->time) {
                                     my $w; $w = AnyEvent->timer(
                                         after => $start - 450 - AnyEvent->time,
                                         cb => sub {
                                             $init_cb->($session);
                                             undef $w;
                                         });
                                 }
                                 else {
                                     $init_cb->($session);
                                 }
                             }
                             for my $strategy_spec (@{$deployment->{strategy}}) {
                                 my ($strategy_name, @args) = split(/\s+/, $strategy_spec);
                                 local @ARGV = (@args, '--contract_code', $deployment->{code},
                                                $ps_object ? (ps_store => $ps_store) : ());

                                 local $_;
                                 my $strategy = TradeSpring::load_strategy($strategy_name, $calc, $broker);
                                 if ($ps_object) {
                                     $strategy->ps($ps_object);
                                 }
                                 my $client = $localbus->new_listener($bar);
                                 $client->on_error(sub {
                                                       $logger->fatal(join(',',@_));
                                                   });
                                 $client->poll(sub {
                                                   $strategy->i($calc->prices->count-1);
                                                   $strategy->run();
                                               });

                                 TradeSpring::pre_run_strategy($session, $strategy) if $deployment->{daytrade};
                                 if ($end > AnyEvent->time) {
                                     my $w; $w = AnyEvent->timer(
                                         after => $end - AnyEvent->time,
                                         cb => sub {
                                             $strategy->end;
                                             undef $w;
                                         });
                                 }


                             }
                         },
                         on_bar => sub {
                             my $msg = shift;
                             $bar->publish($msg);
                         }
                     );

if ($has_jfo) {
    use Plack::Builder;
    my $app = builder {
        TradeSpring::Broker::JFO->mount_instances({ ready_cv => $ready_cv,
                                                    check => 90 });
        mount '/' => sub {
            return [404, ['Conetent-Type', 'text/plain'], ['not found']];
        };
    };

    TradeSpring::Broker::JFO->app_loader($app, __FILE__, $port);
}

exit $quit->recv;
