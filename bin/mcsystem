#!/usr/bin/perl -w
package MC;
use Moose;

with 'TradeSpring::MasterSignal';

has calc => (is => "rw");

sub load {
}

sub init {

}

sub end {

}

sub report_header { }

package main;

use Finance::GeniusTrader::Conf;
Finance::GeniusTrader::Conf::load();

package main;
use strict;
use Getopt::Long qw(:config pass_through);
use TradeSpring;
$ENV{GTINDICATOR_CACHE} = 1 unless exists $ENV{GTINDICATOR_CACHE};

use Finance::GeniusTrader::CLI;

my $logconf;
my $default_stp = 0.01;
my $cnt = 150;
my $iteration = 10000;
my $initial = 1400;
my $cost = 3;

my $ps_store;
my $ps_class = 'TradeSpring::PS::MarketMoney';

my $init = Finance::GeniusTrader::CLI::init(
    'cnt=i' => \$cnt,
    'cost=s' => \$cost,
    'iteration=i' => \$iteration,
    'initial=i' => \$initial,
    'default_stp=s' => \$default_stp,
    'ps_class=s' => \$ps_class,
    'ps_store=s' => \$ps_store,
    "logconf=s" => \$logconf);

my $code = shift or die 'code required';

my ($calc, $first, $last) = $init->($code);
TradeSpring::init_logging($logconf || 'log.conf');

my $lb = TradeSpring::local_broker();

my $mc = TradeSpring::load_strategy('MC', $calc, $lb);

#@ARGV = @{$mc->extra_argv};

$ps_class->require or die $@;

my $ps = TradeSpring::load_ps($ps_class, $ps_store);

my $r = $mc->master_record;
my $n = $#{$r};
use Math::Random::MT;
my $rand = Math::Random::MT->new($$, time);

my @wlv = (0.25, 0.5, 0.75, 0.85, 0.9, 0.95);
my @elv = (1, 1.2, 1.3, 1.5, 1.75, 2, 2.5, 3, 4, 5, 6, 10, 15, 20);

use List::AllUtils qw(max min sum uniq firstidx);

my $base = $initial;
my @total;

my @wcnt = map { 0 } @wlv;
my @ecnt = map { 0 } @elv;

my $res = res_for_seq([0..$n], sub { 1 });

warn "n = ".(scalar @{$r}).$/;
warn Dumper($res); use Data::Dumper;

for my $year (uniq sort map { $_->{date} =~ m/^(\d+)/ } @$r ) {
    my @seq = grep { $r->[$_]{date} =~ m/^$year/ } 0..$n;
    print "$year: "._format_seq(\@seq, sub { 1 }).$/;
}

print "With MM: ".$/;
for my $year (uniq sort map { $_->{date} =~ m/^(\d+)/ } @$r ) {
    my @seq = grep { $r->[$_]{date} =~ m/^$year/ } 0..$n;
    print "$year: "._format_seq(\@seq).$/;
}

print "Plain: ".$/;
for my $year (uniq sort map { $_->{date} =~ m/^(\d+)/ } @$r ) {
    my $f = firstidx { $r->[$_]{date} =~ m/^$year/ } 0..$n;
    print "Since $year: "._format_seq([$f..$n], sub { 1 }).$/;
}

print "Cumulated:".$/;
for my $year (uniq sort map { $_->{date} =~ m/^(\d+)/ } @$r ) {
    my $f = firstidx { $r->[$_]{date} =~ m/^$year/ } 0..$n;
    print "Since $year: "._format_seq([$f..$n]).$/;
}
sub _format_seq {
    my $seq = shift;
    my $res = res_for_seq($seq, @_);
    sprintf '%4d trades(rej: %2d, max qty: %3d), %10.2f%%, mdd: %5.2f%% (%d)', scalar @$seq, $res->{rejected}, $res->{maxqty}, ($res->{end} / $initial-1) * 100, $res->{mddpct} * 100, $res->{mdd};
}


#exit;
#warn $ps->freeze;
#warn Dumper(res_for_seq([$n-$cnt..$n]));
#warn Dumper(res_for_seq([$n-$cnt*2..$n]));
#warn Dumper(res_for_seq([$n-23..$n]));

$ps->store($ps_store) if $ps_store;

#exit;

++$|;
my $worst_mdd = 0;
my $endsum = 0;
my $mddsum = 0;
my $wcssum = 0;
my $worst_wcs = 0;
my $rejsum = 0;

print "Simulation: $iteration iterations, $cnt trades:".$/;

for (1..$iteration) {
    my $ret = sim();
    printf "%5.2f%%\r", ($_ / $iteration) * 100;
#    warn "$ret->{end} / $ret->{mdd}";
    $endsum += $ret->{end};
    $mddsum += $ret->{mddpct};
#    $wcssum += $ret->{worst_consec};
#    $worst_wcs = max($worst_wcs, $ret->{worst_consec});
    $worst_mdd = max($worst_mdd, $ret->{mddpct});
    $rejsum += $ret->{rejected};
    for (0..$#wlv) {
        if ($ret->{worst} <= $initial * $wlv[$_]) {
            ++$wcnt[$_];
        }
    }

    for (0..$#elv) {
        if ($ret->{end} >= $initial * $elv[$_]) {
            ++$ecnt[$_];
        }
    }
}

print "Average End Equity: ".($endsum / $iteration).$/;
printf "Average DD: %5.2f, Worst: %5.2f".$/, ($mddsum / $iteration), $worst_mdd;
printf 'Average Rejected: %d'.$/, ($rejsum / $iteration);
#printf 'Average Consec. Losses: %df, Worst: %d'.$/, ($wcssum / $iteration), $worst_wcs;

print "Risk of ruin:".$/;
for (0..$#wlv) {
    printf "\t".'Down to %5.2f%%: %5.2f%%'.$/, $wlv[$_] * 100, $wcnt[$_] / $iteration * 100;
}

print "Chances of profit: ".$/;
for (0..$#elv) {
    printf "\t".'Gain %6.2f%%: %5.2f%%'.$/, ($elv[$_] -1 ) * 100, $ecnt[$_] / $iteration * 100;
}

sub sim {
    my @seq = map { int($rand->rand * ($n+1)) } ( 1 .. $cnt );

    res_for_seq(\@seq);
}

sub res_for_seq {
    my $seq = shift;
    my $cb_qty = shift || sub { $ps->get_qty(@_) };
    my $verbose = shift;
    $ps->reset_base($initial);
    my $e = $initial;
    my $mdd = 0;
    my $mddpct = 0;
    my $maxqty = 0;
    my $best = $e;
    my $worst = $e;
    my $rejected = 0;

#    warn $r->[$seq->[0]]{date};

#    my $consec = 0;
#    my $best_consec = 0;
#    my $cummax_win = [];
#    use Number::Extreme;
#    my $worst_consec = Number::Extreme->max(sub { $cummax_win->[$_] });
#    my $i = 0;
    for (@$seq) {
        my $entry = $r->[$_];
        my $r = $entry->{r} || int($entry->{open_price} * $default_stp);
        my $rm = ($entry->{profit} - $cost) / $r;
        my $qty = min($cb_qty->($r), 64);
        unless ($qty) {
            ++$rejected;
            next;
        }
        $e += $rm * $r * $qty;
        if ($verbose) {
            print "$entry->{date} E = $e, qty = $qty, profit = $entry->{profit} - $cost".$/;
        }
        $ps->equity($e);
#        $consec += ($entry->{profit} > 0) ? 1 : -1;
#        $best_consec  = max($best_consec, $consec);
#        push @$cummax_win, $best_consec - $consec;
#        $worst_consec->test($i);

        $best = max($best, $e);
        $maxqty = max($maxqty, $qty);
        $worst = min($worst, $e);
        $mdd = max($mdd, $best - $e);
        $mddpct = max($mddpct, $mdd / $best);
#        ++$i;
    }
#    warn "==> $mddpct | $maxqty / $mdd | $e ".($e/$initial);
    return {
        end => $e,
        worst => $worst,
        rejected => $rejected,
        best => $best,
        mdd => $mdd,
#        worst_consec => $worst_consec,
        mddpct => $mddpct,
        maxqty => $maxqty,
    }
}
