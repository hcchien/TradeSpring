#!/usr/bin/perl -w
use strict;
use Finance::GeniusTrader::Conf;

Finance::GeniusTrader::Conf::load();

package main;
use strict;
use Moose;
use AnyMQ;
use AnyEvent;
use YAML::Syck qw(LoadFile);
use Getopt::Long qw(:config pass_through);
use Log::Log4perl;
use TradeSpring;

my $port = 5019;
my $test_broker;
my $logconf;
my $daytrade;
my $localpagm;
my $keepaddress;
my $loadcnt;

GetOptions ("test"      => \$test_broker,
            "localpagm" => \$localpagm,
            "logconf=s" => \$logconf,
            "daytrade"  => \$daytrade,
            "loadcnt=i" => \$loadcnt,
            "keepaddress" => \$keepaddress,
            "port=i"    => \$port,
        ) or die;

TradeSpring::init_logging($logconf || 'log.conf');
my $logger = Log::Log4perl->get_logger("tradespring");

my $config = LoadFile(shift) or die;

my $code = shift or die 'code required';
my $tf = shift or die 'timeframe required';
my $strategy_name = shift;
$strategy_name->require or die $@;

my $amq = $config->{anymq};
my $bus = $amq->{traits}
    ? AnyMQ->new_with_traits(%$amq) : AnyMQ->new(%$amq);

my $pagm = $bus->topic({name => 'pagmctrl.'.$config->{node}});
my $myself = $bus->topic("pagmclient-$$");
my $client = $bus->new_listener($myself);

my $quit = AE::cv;

$client->on_error(sub {
                      $logger->fatal(join(',',@_));
                  });

my $server;

if ($localpagm) {
    require PAGM;
    my $cfg = $config->{instruments}{$code} or die;

    $server = PAGM->new( bus => $bus,
                         code => $code,
                         tf => $cfg->{tf} || [],
                         db_class => $cfg->{db_class},
                         db_args  => $cfg->{db_args},
                         session => $cfg->{session},
                         tz => $cfg->{tz},
                         node_id => $config->{node} );
}

$|++;

my $cname = shift;

my $broker = $test_broker ? TradeSpring::local_broker()
                          : TradeSpring::jfo_broker($cname, $keepaddress ? undef : $port,
                                                    daytrade => $daytrade);
my $has_jfo = TradeSpring::Broker::JFO->can('jfo_instances') &&
    scalar keys %{ TradeSpring::Broker::JFO->jfo_instances };
my $ready_cv = AE::cv;
my $init_cb = sub {
    $ready_cv->send(1);
};

TradeSpring::livespring($pagm, $client, $myself, $code, $tf,
                        $logger, $strategy_name, $broker, $daytrade, $init_cb, $loadcnt);

if ($has_jfo) {
    use Plack::Builder;
    my $app = builder {
        TradeSpring::Broker::JFO->mount_instances({ ready_cv => $ready_cv,
                                                    check => 90 });
        mount '/' => sub {
            return [404, ['Conetent-Type', 'text/plain'], ['not found']];
        };
    };

    TradeSpring::Broker::JFO->app_loader($app, __FILE__, $port);
}

exit $quit->recv;
