#!/usr/bin/perl -w
use strict;
use Finance::GeniusTrader::Conf;

Finance::GeniusTrader::Conf::load();

package main;
use strict;
use AnyEvent;
use YAML::Syck qw(LoadFile);
use Getopt::Long qw(:config pass_through);
use Log::Log4perl;
use TradeSpring;

my $port = 5019;
my $test_broker;
my $logconf;
my $daytrade;
my $localpagm;

GetOptions ("test"      => \$test_broker,
            "localpagm" => \$localpagm,
            "logconf=s" => \$logconf,
            "daytrade"  => \$daytrade,
            "port=i"    => \$port,
        ) or die;

TradeSpring::init_logging($logconf || 'log.conf');
my $logger = Log::Log4perl->get_logger("tradespring");

my $config = LoadFile(shift) or die;

my $code = shift or die 'code required';
my $tf = shift or die 'timeframe required';
my $strategy_name = shift;
$strategy_name->require or die $@;

my $amq = $config->{anymq};
my $bus = $amq->{traits}
    ? AnyMQ->new_with_traits(%$amq) : AnyMQ->new(%$amq);

my $pagm = $bus->topic({name => 'pagmctrl.'.$config->{node}});
my $myself = $bus->topic("pagmclient-$$");
my $client = $bus->new_listener($myself);

my $quit = AE::cv;

$client->on_error(sub {
                      $logger->fatal(join(',',@_));
                  });

my $server;

if ($localpagm) {
    require PAGM;
    my $cfg = $config->{instruments}{$code} or die;

    $server = PAGM->new( bus => $bus,
                         code => $code,
                         tf => $cfg->{tf} || [],
                         db_class => $cfg->{db_class},
                         db_args  => $cfg->{db_args},
                         session => $cfg->{session},
                         tz => $cfg->{tz},
                         node_id => $config->{node} );
}

$|++;

my $cname = shift;

my ($broker, $c) = $test_broker ? (TradeSpring::local_broker, undef)
                                : TradeSpring::jfo_broker($cname, $port,
                                                          daytrade => $daytrade);

my $cv_ready;
my $handler = TradeSpring::live_handler($pagm, $client, $myself, $code, $tf,
                                        $logger, $strategy_name, $broker, $daytrade);

if ($c) {
    my $w; $w = AnyEvent->timer( after => 30,
                                 cb => sub {
                                     $logger->fatal("JFO endpoint not repsonding");
                                     undef $w;
                                     $quit->send(-1);
                                 });
    $cv_ready = AE::cv(
        sub {
            undef $w;
            $client->poll($handler);
            $pagm->publish({ type => 'pagm.session', code => $code, reply => $myself->name });
        });
}
else {
    $client->poll($handler);
    $pagm->publish({ type => 'pagm.session', code => $code, reply => $myself->name });

}

# XXX: refactor into broker::jfo loader
use Plack::Builder;
sub _mount_accounts {
    my ($class, $accounts) = @_;

    for my $a (keys %$accounts) {
        my $account = $accounts->{$a};

        my $w; $w = AnyEvent->timer
            ( after => 5,
              interval => 60,
              cb => sub {
                  $w;
                  my $endpoint = $account->{endpoint};
                  $endpoint->jsonrpc_call( 'Ping', { cb => $endpoint->notify_uri.'_' },
                                           cb => sub { $account->{endpoint_seen} = AnyEvent->now },
                                           on_fail => sub { $account->{uk} = undef;
                                                            $logger->error("endpoint not responding: ".$_[0]);
                                                        });
              });

        mount '/notify/'.$a.'_' => sub {
            my $env = shift;
            my $req = Plack::Request->new($env);
            my $v = $req->parameters->mixed;
            if ($v->{notify} eq 'heartbeat') {
                $account->{_ready}->send if $account->{_ready};
                unless ( $account->{uk} = $v->{uk} ) {
                    $logger->error("endpoint not logged in");
                }
            }
            else {
                $logger->warn("unknown heartbeat response ".Dumper($v));use Data::Dumper;
            }
            return [200, ['Content-Type' => 'text/plain'], ['ok']];
        };

        mount '/notify/'.$a => TradeSpring::Broker::JFO->psgi_app;
    }
    mount '/' => sub { [200, ['Content-Type' => 'text/plain'], ['ok']] };
};

# XXX: WSJ-like init
if ($c) {
    require WSJ;

    my $app = builder {
        #    mount '/notify' => TradeSpring::Broker::JFO->psgi_app;
        main->_mount_accounts({ $c->account->name => { _ready => $cv_ready, endpoint => $c->account->endpoint  } })
    }->to_app;

    WSJ->wsj_loader($app, __FILE__, $port);
}
exit $quit->recv;
